# Data: abril 2025
# Autores:
# - Inês Mendes
# - Margarida Tavares
# - Tomás Franco

trigger:
  - main  # Ou a branch que deseja monitorar

pool:
  name: grupo2  # Nome do pool de agentes

strategy:
  matrix:
    Python310:
      python.version: '3.10'
    Python311:
      python.version: '3.11'
    Python312:
      python.version: '3.12'

steps:
  # 1. Selecionar a versão do Python
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Selecionar Python $(python.version)'

  # 2. Criar o ambiente virtual e instalar dependências
  - script: |
      python -m venv .venv
      source .venv/bin/activate
      python -m pip install --upgrade pip
      pip install -r requirements.txt  # Instalar as dependências do requirements.txt
    displayName: 'Criar venv e instalar dependências'

  # 3. Instalar autopep8 e flake8
  - script: |
      source .venv/bin/activate
      echo "Instalando autopep8 e flake8..."
      pip install autopep8 flake8  # Instalar autopep8 e flake8
    displayName: 'Instalar autopep8 e flake8'

  # 4. Atualizar o requirements.txt com as dependências atuais
  - script: |
      source .venv/bin/activate
      echo "Atualizando requirements.txt..."
      pip freeze > requirements.txt  # Atualiza o arquivo requirements.txt com todas as dependências
    displayName: 'Atualizar requirements.txt'

  # 5. Corrigir o código automaticamente com autopep8
  - script: |
      source .venv/bin/activate
      echo "Corrigindo o código com autopep8..."
      autopep8 --in-place --recursive .  # Corrige todos os arquivos Python
    displayName: 'Corrigir código com autopep8'

  # 6. Validar o código com flake8
  - script: |
      source .venv/bin/activate
      echo "Executando flake8..."
      flake8 . || exit_code=$?  # Roda o flake8 e captura o código de saída

      # Verifica o código de erro retornado
      if [ "$exit_code" -eq 1 ]; then
        echo "Erro de lint (exit 1)"
        exit 1  # Força a falha da pipeline com código 1
      elif [ "$exit_code" -eq 2 ]; then
        echo "Erro de sintaxe (exit 2)"
        exit 2  # Força a falha da pipeline com código 2
      fi
    displayName: 'Executar Linting com flake8'
    continueOnError: false  # Garante que a pipeline falhe se houver erro

  # 7. Commit e Push das correções feitas com autopep8
  - script: |
      echo "Configurando Git..."
      git config --global user.email "youremail@example.com"
      git config --global user.name "Your Name"
      
      # Verificando se há alterações
      git diff --exit-code || (
        echo "Alterações detectadas, realizando commit..."
        git add .
        git commit -m "Corrigir estilo com autopep8"
        git push origin $(Build.SourceBranchName)  # Empurrar para a branch de origem (ex: main)
      )
    displayName: 'Commit e Push das alterações corrigidas'
    continueOnError: false  # Não queremos que isso continue em caso de falha



